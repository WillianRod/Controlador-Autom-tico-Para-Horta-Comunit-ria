ThingSpeak.Widget=function(){var e=function(e,a){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",r=a+n,l=Number(l),i=e.params,s=e.enabled_fields;switch(l){case 0:t(r,i,s,n)}},t=function(e,t,a,n){var l=0,r="<table id='widget_params_config_"+n+"'>";for(key in t)if(t.hasOwnProperty(key))if("min"==key||"max"==key||"tick_interval"==key)r+=d(key,t[key],"number",n);else if("update_interval"==key)r+=d(key,t[key],"number",n,"second(s)");else if("display_value"==key)r+=d(key,t[key],"checkbox",n);else if("units"==key)r+=d(key,t[key],"text",n,"","Enter Measurement Units");else if("title"==key)r+=d(key,t[key],"text",n,"","Enter Title for the widget");else if("field"==key){var i=t[key].split(",");r+=o(key,i,n,a)}else if("range"==key){l=Object.keys(t[key]).length,r+="<tr><td class='widget-form-label widget-table-cells'>  <label class='control-label'>"+s(key)+" </label></td>";for(var u in t[key])r+="<td class='widget-table-cells'><input class='form-control' type='number' step='any' name='range_start_"+u+"' value='"+(""===t[key][u].start?0:t[key][u].start)+"'></input></td><td class='widget-table-cells'><input class='form-control' type='number' step='any' name='range_end_"+u+"' value='"+(""===t[key][u].end?0:t[key][u].end)+"' >  </input></td> <td class='widget-table-cells'><input class='form-control' type='color' name='range_color_"+u+"'  value='"+t[key][u].color+"' >  </input></td><td name='"+n+"' class='color-range-row' onclick='removeHelper(this)'><span  class='close' aria-hidden='true'>&times;</span></td><tr></tr><td></td>"}else r+=d(key,t[key],"text",n);document.getElementById(e).innerHTML=r+" <br/></table> <span id='widget_add_range_"+n+"' class='fa fa-plus fa-mid-align' aria-hidden='true'></span> <div id='range_meta_key_"+n+"' style='display: none;'>"+l+"</div>",c(n)};this.removeHelper=function(e){var t=e.getAttributeNode("name").value,a=$("#range_meta_key_"+t).html();null!=document.getElementById("range_meta_key_")&&(document.getElementById("range_meta_key_"+t).innerHTML=Number(a)-1),$(e).parent().remove()};var a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=$("#widget_params_config_"+e),a={},l=!1,r=function(){var e="",t="";0==this.name.indexOf("range")?(n(this,a),l=!0):(e=this.value,t=this.name,a[t]=e)};return t.find(".form-control").each(r),a.range=l?a.range.filter(function(e){return e}):"",a},n=function(e,t){var a,n=[],l={};t.hasOwnProperty("range")&&(n=t.range),paramValue=e.value,paramName=e.name.split("_")[1],a=e.name.split("_")[2],l[paramName]=paramValue,void 0===n[a]?n[a]=l:(l=n[a],l[paramName]=paramValue),t.range=n},l=function(e,t){data={widget_id:t},$.ajax({method:"GET",url:"/channels/"+e+"/widgets/"+t,data:data,dataType:"json"})},r=function(e,t,a){var n={widget_type:t};$.ajax({method:"GET",url:"/channels/"+e+"/widgets/new.json",data:n,dataType:"json",success:function(e){return 1==a&&ThingSpeak.Widget.constructConfigModal(e.widget_params,"configure_widget_modal_content_body"),e},error:function(){$("#invalid_widget_type").show(),$("#configure_widget_parameters_modal").modal("toggle")}})},i=function(e){var t=document.getElementById(e);t.checked="true"==t.value?!0:!1},s=function(e){var t="";return e.split("_").forEach(function(e){t+=e.charAt(0).toUpperCase()+e.slice(1)+" "}),t.trim()},o=function(e,t,a,n){var l="";return n.split(",").forEach(1==t.length?function(e){l+=e==t?" <option value='"+t+"' selected> "+t+" </option> ":" <option value='"+e+"'> "+e+" </option> "}:function(e){l+=" <option value='"+e+"'> "+e+" </option> "}),"<tr><td class='widget-table-cells widget-form-label'> <label class='control-label'>"+s(e)+"</label></td><td class='widget-table-cells'> <select class='form-control' id='"+e+"_"+a+"' name='"+e+"'>"+l+"</select>"},d=function(e,t,a,n){var l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"",r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"",i="Max should be greater than Min";if("number"===a)var o=u(e);if("max"===e)var d="title='"+i+"'";if("title"===e)var c="maxlength=80";var m="<tr><td class='widget-form-label widget-table-cells'> <label class='control-label'>"+s(e)+"</label></td><td class='widget-table-cells'><input class='form-control' "+d+" "+c+" placeholder ='"+r+" ' type='"+a+"' "+o+" id='"+e+"_"+n+"' name='"+e+"' value='"+t+"'> </input></td><td class='widget-table-cells'> &nbsp "+l+"</td></tr>";return m},u=function(e){switch(e){case"min":case"max":return"step='any'";case"tick_interval":return"step='any' oninput='validity.valid||(value=0)' min='0'";case"update_interval":return meter_data.is_free_user?"oninput='validity.valid||(value=15)' min='15'":"oninput='validity.valid||(value=1)' min='1'";default:return""}},c=function(e){i("display_value_"+e)};return{getWidgetParams:l,formWidgetParams:a,getNewWidgetParams:r,constructConfigModal:e}}();